# Generated by Django 4.2 on 2025-06-11 10:55

import candidate.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mpr', '0001_initial'),
        ('email_service', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Primary email address for the candidate', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('name', models.CharField(help_text='Full name of the candidate', max_length=255)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('alternative_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('current_position', models.CharField(blank=True, max_length=255, null=True)),
                ('current_company', models.CharField(blank=True, max_length=255, null=True)),
                ('professional_summary', models.TextField(blank=True, help_text='Brief professional summary or objective')),
                ('experience_years', models.PositiveIntegerField(blank=True, null=True)),
                ('professional_skills', models.JSONField(blank=True, default=list)),
                ('technical_skills', models.JSONField(blank=True, default=list)),
                ('soft_skills', models.JSONField(blank=True, default=list)),
                ('languages', models.JSONField(blank=True, default=list, help_text='List of languages with proficiency levels')),
                ('certifications', models.JSONField(blank=True, default=list)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('portfolio_url', models.URLField(blank=True, null=True)),
                ('github_url', models.URLField(blank=True, null=True)),
                ('personal_website', models.URLField(blank=True, null=True)),
                ('hiring_status', models.CharField(choices=[('applied', 'Applied'), ('screening', 'Initial Screening'), ('portfolio_review', 'Portfolio Review'), ('phone_interview', 'Phone Interview'), ('technical_interview', 'Technical Interview'), ('final_interview', 'Final Interview'), ('reference_check', 'Reference Check'), ('offer_pending', 'Offer Pending'), ('offer_accepted', 'Offer Accepted'), ('offer_declined', 'Offer Declined'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('withdrawn', 'Withdrawn')], default='applied', max_length=20)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('skill_match_percentage', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('matched_skills_count', models.PositiveIntegerField(blank=True, null=True)),
                ('total_skills_count', models.PositiveIntegerField(blank=True, null=True)),
                ('salary_expectation', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salary_currency', models.CharField(blank=True, default='USD', max_length=3)),
                ('availability_date', models.DateField(blank=True, null=True)),
                ('notice_period_days', models.PositiveIntegerField(blank=True, null=True)),
                ('internal_notes', models.TextField(blank=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'candidates',
                'ordering': ['-applied_at'],
            },
        ),
        migrations.CreateModel(
            name='CandidateAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('original_file_name', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(choices=[('cv', 'CV/Resume'), ('cover_letter', 'Cover Letter'), ('portfolio', 'Portfolio'), ('certificate', 'Certificate'), ('transcript', 'Transcript'), ('photo', 'Photo'), ('project_file', 'Project File'), ('other', 'Other Document')], default='other', max_length=50)),
                ('mime_type', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to=candidate.models.candidate_attachment_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'zip', 'rar'])])),
                ('is_primary_cv', models.BooleanField(default=False)),
                ('is_latest_version', models.BooleanField(default=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_notes', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='candidate.candidate')),
            ],
            options={
                'db_table': 'candidate_attachments',
                'ordering': ['-is_primary_cv', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CandidateWorkExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('position_title', models.CharField(max_length=255)),
                ('department', models.CharField(blank=True, max_length=255)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('freelance', 'Freelance'), ('internship', 'Internship'), ('volunteer', 'Volunteer')], default='full_time', max_length=50)),
                ('job_description', models.TextField(blank=True)),
                ('key_achievements', models.TextField(blank=True)),
                ('technologies_used', models.JSONField(blank=True, default=list)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_experiences', to='candidate.candidate')),
            ],
            options={
                'db_table': 'candidate_work_experiences',
                'ordering': ['-start_date', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='CandidateStatusUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_status', models.CharField(blank=True, choices=[('applied', 'Applied'), ('screening', 'Initial Screening'), ('portfolio_review', 'Portfolio Review'), ('phone_interview', 'Phone Interview'), ('technical_interview', 'Technical Interview'), ('final_interview', 'Final Interview'), ('reference_check', 'Reference Check'), ('offer_pending', 'Offer Pending'), ('offer_accepted', 'Offer Accepted'), ('offer_declined', 'Offer Declined'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('withdrawn', 'Withdrawn')], max_length=20, null=True)),
                ('new_status', models.CharField(blank=True, choices=[('applied', 'Applied'), ('screening', 'Initial Screening'), ('portfolio_review', 'Portfolio Review'), ('phone_interview', 'Phone Interview'), ('technical_interview', 'Technical Interview'), ('final_interview', 'Final Interview'), ('reference_check', 'Reference Check'), ('offer_pending', 'Offer Pending'), ('offer_accepted', 'Offer Accepted'), ('offer_declined', 'Offer Declined'), ('rejected', 'Rejected'), ('on_hold', 'On Hold'), ('withdrawn', 'Withdrawn')], max_length=20, null=True)),
                ('reason', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='candidate.candidate')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='candidate_status_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'candidate_status_updates',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CandidateReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_name', models.CharField(max_length=255)),
                ('reference_title', models.CharField(max_length=255)),
                ('company_name', models.CharField(max_length=255)),
                ('relationship', models.CharField(choices=[('supervisor', 'Direct Supervisor'), ('manager', 'Manager'), ('colleague', 'Colleague'), ('client', 'Client'), ('mentor', 'Mentor'), ('other', 'Other')], max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('permission_to_contact', models.BooleanField(default=False)),
                ('contact_preference', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('both', 'Both')], default='email', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='references', to='candidate.candidate')),
            ],
            options={
                'db_table': 'candidate_references',
                'ordering': ['reference_name'],
            },
        ),
        migrations.CreateModel(
            name='CandidateProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=255)),
                ('project_type', models.CharField(choices=[('professional', 'Professional Project'), ('personal', 'Personal Project'), ('academic', 'Academic Project'), ('open_source', 'Open Source'), ('freelance', 'Freelance Project')], default='professional', max_length=50)),
                ('description', models.TextField()),
                ('technologies_used', models.JSONField(blank=True, default=list)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('project_url', models.URLField(blank=True, null=True)),
                ('github_url', models.URLField(blank=True, null=True)),
                ('demo_url', models.URLField(blank=True, null=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='candidate.candidate')),
            ],
            options={
                'db_table': 'candidate_projects',
                'ordering': ['-is_featured', '-start_date', 'display_order'],
            },
        ),
        migrations.CreateModel(
            name='CandidateMPR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_stage', models.CharField(choices=[('applied', 'Applied'), ('under_review', 'Under Review'), ('shortlisted', 'Shortlisted'), ('interview_scheduled', 'Interview Scheduled'), ('interviewed', 'Interviewed'), ('final_review', 'Final Review'), ('offer_made', 'Offer Made'), ('hired', 'Hired'), ('rejected', 'Rejected'), ('withdrawn', 'Withdrawn')], default='applied', max_length=30)),
                ('application_notes', models.TextField(blank=True)),
                ('recruiter_notes', models.TextField(blank=True)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mpr_applications', to='candidate.candidate')),
                ('mpr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_applications', to='mpr.mpr')),
                ('primary_cv', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mpr_applications_as_cv', to='candidate.candidateattachment')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_candidate_mprs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'candidate_mpr_applications',
                'ordering': ['-applied_at'],
            },
        ),
        migrations.CreateModel(
            name='CandidateEmailConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_type', models.CharField(choices=[('application', 'Application Email'), ('follow_up', 'Follow-up Email'), ('interview_invitation', 'Interview Invitation'), ('interview_confirmation', 'Interview Confirmation'), ('interview_reminder', 'Interview Reminder'), ('feedback_request', 'Feedback Request'), ('offer_letter', 'Offer Letter'), ('rejection_letter', 'Rejection Letter'), ('general', 'General Communication')], default='general', max_length=50)),
                ('is_inbound', models.BooleanField(default=True, help_text='True if email is from candidate to us')),
                ('requires_response', models.BooleanField(default=False)),
                ('is_responded', models.BooleanField(default=False)),
                ('internal_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_connections', to='candidate.candidate')),
                ('email_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='candidate_connections', to='email_service.emailmessage')),
            ],
            options={
                'db_table': 'candidate_email_connections',
                'ordering': ['-email_message__received_datetime'],
            },
        ),
        migrations.CreateModel(
            name='CandidateEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(max_length=255)),
                ('degree_type', models.CharField(choices=[('high_school', 'High School'), ('diploma', 'Diploma'), ('associate', 'Associate Degree'), ('bachelor', 'Bachelor Degree'), ('master', 'Master Degree'), ('phd', 'PhD'), ('professional', 'Professional Certificate'), ('other', 'Other')], max_length=50)),
                ('field_of_study', models.CharField(max_length=255)),
                ('specialization', models.CharField(blank=True, max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('grade_gpa', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('thesis_title', models.CharField(blank=True, max_length=500)),
                ('honors_awards', models.TextField(blank=True)),
                ('relevant_coursework', models.TextField(blank=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_history', to='candidate.candidate')),
            ],
            options={
                'db_table': 'candidate_education',
                'ordering': ['-start_date', 'display_order'],
            },
        ),
        migrations.AddField(
            model_name='candidateattachment',
            name='email_connection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='candidate.candidateemailconnection'),
        ),
        migrations.AddField(
            model_name='candidateattachment',
            name='uploaded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_candidate_attachments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['email'], name='candidates_email_32f680_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['hiring_status'], name='candidates_hiring__ff6819_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['applied_at'], name='candidates_applied_e63f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='candidate',
            index=models.Index(fields=['overall_score'], name='candidates_overall_8be02e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='candidatempr',
            unique_together={('candidate', 'mpr')},
        ),
        migrations.AlterUniqueTogether(
            name='candidateemailconnection',
            unique_together={('candidate', 'email_message')},
        ),
        migrations.AddIndex(
            model_name='candidateattachment',
            index=models.Index(fields=['candidate', 'file_type'], name='candidate_a_candida_9a0071_idx'),
        ),
        migrations.AddIndex(
            model_name='candidateattachment',
            index=models.Index(fields=['is_primary_cv'], name='candidate_a_is_prim_e8933e_idx'),
        ),
    ]
