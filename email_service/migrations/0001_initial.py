# Generated by Django 4.2 on 2025-06-11 10:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailServiceSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Service name identifier', max_length=100, unique=True)),
                ('email', models.EmailField(help_text='Service account email for Graph API', max_length=254)),
                ('encrypted_password', models.TextField(help_text='Encrypted password for the service account')),
                ('tenant_id', models.CharField(help_text='Azure tenant ID', max_length=100)),
                ('client_id', models.CharField(help_text='Azure client ID', max_length=100)),
                ('client_secret', models.TextField(help_text='Azure client secret')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False, help_text='Default service for email operations')),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('sync_enabled', models.BooleanField(default=True)),
                ('sync_interval_minutes', models.IntegerField(default=15, help_text='Sync interval in minutes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_email_services', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_email_services', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Service Setting',
                'verbose_name_plural': 'Email Service Settings',
                'db_table': 'email_service_settings',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailSyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_started_at', models.DateTimeField(auto_now_add=True)),
                ('sync_completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='running', max_length=20)),
                ('emails_processed', models.IntegerField(default=0)),
                ('emails_created', models.IntegerField(default=0)),
                ('emails_updated', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('error_details', models.JSONField(default=dict)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='email_service.emailservicesetting')),
            ],
            options={
                'db_table': 'email_sync_logs',
                'ordering': ['-sync_started_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.CharField(help_text='Unique message ID from Graph API', max_length=255, unique=True)),
                ('conversation_id', models.CharField(db_index=True, help_text='Conversation ID from Graph API', max_length=255)),
                ('subject', models.TextField()),
                ('body_preview', models.TextField(blank=True)),
                ('body_content', models.TextField(blank=True)),
                ('body_content_type', models.CharField(choices=[('text', 'Text'), ('html', 'HTML')], default='html', max_length=10)),
                ('from_email', models.EmailField(max_length=254)),
                ('from_name', models.CharField(blank=True, max_length=255)),
                ('to_recipients', models.JSONField(default=list, help_text='List of To recipients')),
                ('cc_recipients', models.JSONField(default=list, help_text='List of CC recipients')),
                ('bcc_recipients', models.JSONField(default=list, help_text='List of BCC recipients')),
                ('importance', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High')], default='normal', max_length=10)),
                ('is_read', models.BooleanField(default=False)),
                ('is_draft', models.BooleanField(default=False)),
                ('has_attachments', models.BooleanField(default=False)),
                ('categories', models.JSONField(default=list, help_text='Email categories')),
                ('folder_id', models.CharField(blank=True, max_length=255)),
                ('folder_name', models.CharField(blank=True, max_length=255)),
                ('sent_datetime', models.DateTimeField()),
                ('received_datetime', models.DateTimeField()),
                ('created_datetime', models.DateTimeField()),
                ('last_modified_datetime', models.DateTimeField()),
                ('synced_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to='email_service.emailservicesetting')),
            ],
            options={
                'db_table': 'email_messages',
                'ordering': ['-received_datetime'],
            },
        ),
        migrations.CreateModel(
            name='EmailAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment_id', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('content_type', models.CharField(max_length=100)),
                ('size', models.IntegerField(help_text='Size in bytes')),
                ('is_inline', models.BooleanField(default=False)),
                ('content_bytes', models.BinaryField(blank=True, null=True)),
                ('content_url', models.URLField(blank=True, help_text='URL to download attachment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='email_service.emailmessage')),
            ],
            options={
                'db_table': 'email_attachments',
            },
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['service', 'received_datetime'], name='email_messa_service_4c9b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['from_email'], name='email_messa_from_em_b28e83_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['is_read'], name='email_messa_is_read_4db32a_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['message_id'], name='email_messa_message_38c96a_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['conversation_id'], name='email_messa_convers_e5b974_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emailattachment',
            unique_together={('email', 'attachment_id')},
        ),
    ]
