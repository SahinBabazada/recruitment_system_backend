# Generated by Django 5.2.3 on 2025-06-16 17:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('mpr', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activated_at', models.DateTimeField(blank=True, null=True)),
                ('node_count', models.PositiveIntegerField(default=0)),
                ('connection_count', models.PositiveIntegerField(default=0)),
                ('activated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='activated_flows', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_flows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flows',
                'ordering': ['-version', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FlowExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('execution_context', models.JSONField(default=dict)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='executions', to='flows.flow')),
                ('mpr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flow_executions', to='mpr.mpr')),
            ],
            options={
                'db_table': 'flow_executions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='FlowHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('activated', 'Activated'), ('archived', 'Archived'), ('node_added', 'Node Added'), ('node_updated', 'Node Updated'), ('node_deleted', 'Node Deleted'), ('connection_added', 'Connection Added'), ('connection_deleted', 'Connection Deleted')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True)),
                ('previous_state', models.JSONField(blank=True, null=True)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='flows.flow')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='flow_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'flow_history',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FlowNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_id', models.CharField(max_length=50)),
                ('node_type', models.CharField(choices=[('start', 'Start Node'), ('approval', 'Approval Stage'), ('condition', 'Condition Check'), ('notification', 'Notification'), ('end', 'End Node')], max_length=20)),
                ('name', models.CharField(max_length=200)),
                ('position_x', models.FloatField()),
                ('position_y', models.FloatField()),
                ('properties', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='flows.flow')),
            ],
            options={
                'db_table': 'flow_nodes',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FlowExecutionStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_order', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('input_data', models.JSONField(default=dict)),
                ('output_data', models.JSONField(default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_steps', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='flows.flowexecution')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='flows.flownode')),
            ],
            options={
                'db_table': 'flow_execution_steps',
                'ordering': ['step_order'],
            },
        ),
        migrations.AddField(
            model_name='flowexecution',
            name='current_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='flows.flownode'),
        ),
        migrations.CreateModel(
            name='FlowConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_id', models.CharField(max_length=50)),
                ('connection_type', models.CharField(choices=[('output', 'Standard Output'), ('true', 'Condition True'), ('false', 'Condition False')], default='output', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='flows.flow')),
                ('end_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_connections', to='flows.flownode')),
                ('start_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_connections', to='flows.flownode')),
            ],
            options={
                'db_table': 'flow_connections',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FlowConditionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.PositiveIntegerField()),
                ('logic_operator', models.CharField(choices=[('AND', 'AND'), ('OR', 'OR')], default='AND', max_length=3)),
                ('parent_group', models.PositiveIntegerField(blank=True, null=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='condition_groups', to='flows.flownode')),
            ],
            options={
                'db_table': 'flow_condition_groups',
                'ordering': ['group_id'],
            },
        ),
        migrations.CreateModel(
            name='FlowCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition_id', models.PositiveIntegerField()),
                ('field', models.CharField(choices=[('priority', 'Priority'), ('department', 'Department'), ('budget_amount', 'Budget Amount'), ('employment_type', 'Employment Type'), ('location', 'Location'), ('hiring_reason', 'Hiring Reason'), ('desired_start_date', 'Start Date'), ('position_level', 'Position Level'), ('salary_range', 'Salary Range')], max_length=50)),
                ('operator', models.CharField(choices=[('equals', 'Equals'), ('not_equals', 'Not Equals'), ('greater_than', 'Greater Than'), ('less_than', 'Less Than'), ('greater_equal', 'Greater or Equal'), ('less_equal', 'Less or Equal'), ('contains', 'Contains'), ('starts_with', 'Starts With'), ('ends_with', 'Ends With'), ('in_list', 'In List'), ('is_null', 'Is Empty'), ('is_not_null', 'Is Not Empty')], max_length=20)),
                ('value', models.CharField(blank=True, max_length=500)),
                ('group_id', models.PositiveIntegerField(default=1)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='flows.flownode')),
            ],
            options={
                'db_table': 'flow_conditions',
                'ordering': ['group_id', 'condition_id'],
            },
        ),
        migrations.AddIndex(
            model_name='flow',
            index=models.Index(fields=['status'], name='flows_status_20ed6c_idx'),
        ),
        migrations.AddIndex(
            model_name='flow',
            index=models.Index(fields=['version'], name='flows_version_78300c_idx'),
        ),
        migrations.AddIndex(
            model_name='flow',
            index=models.Index(fields=['created_at'], name='flows_created_41b4ea_idx'),
        ),
        migrations.AddConstraint(
            model_name='flow',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'active')), fields=('status',), name='unique_active_flow'),
        ),
        migrations.AddIndex(
            model_name='flowhistory',
            index=models.Index(fields=['flow', '-timestamp'], name='flow_histor_flow_id_5d36c0_idx'),
        ),
        migrations.AddIndex(
            model_name='flowhistory',
            index=models.Index(fields=['user', '-timestamp'], name='flow_histor_user_id_583d6b_idx'),
        ),
        migrations.AddIndex(
            model_name='flowhistory',
            index=models.Index(fields=['action'], name='flow_histor_action_fa5b02_idx'),
        ),
        migrations.AddIndex(
            model_name='flownode',
            index=models.Index(fields=['flow', 'node_type'], name='flow_nodes_flow_id_601ef1_idx'),
        ),
        migrations.AddIndex(
            model_name='flownode',
            index=models.Index(fields=['node_id'], name='flow_nodes_node_id_af5a44_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='flownode',
            unique_together={('flow', 'node_id')},
        ),
        migrations.AddIndex(
            model_name='flowexecutionstep',
            index=models.Index(fields=['execution', 'status'], name='flow_execut_executi_dcdca3_idx'),
        ),
        migrations.AddIndex(
            model_name='flowexecutionstep',
            index=models.Index(fields=['node'], name='flow_execut_node_id_e3c213_idx'),
        ),
        migrations.AddIndex(
            model_name='flowexecutionstep',
            index=models.Index(fields=['assigned_to', 'status'], name='flow_execut_assigne_861884_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='flowexecutionstep',
            unique_together={('execution', 'step_order')},
        ),
        migrations.AddIndex(
            model_name='flowexecution',
            index=models.Index(fields=['flow', 'status'], name='flow_execut_flow_id_c041c4_idx'),
        ),
        migrations.AddIndex(
            model_name='flowexecution',
            index=models.Index(fields=['mpr'], name='flow_execut_mpr_id_729cf6_idx'),
        ),
        migrations.AddIndex(
            model_name='flowexecution',
            index=models.Index(fields=['status', '-started_at'], name='flow_execut_status_2e5ebe_idx'),
        ),
        migrations.AddIndex(
            model_name='flowconnection',
            index=models.Index(fields=['flow'], name='flow_connec_flow_id_f5cd06_idx'),
        ),
        migrations.AddIndex(
            model_name='flowconnection',
            index=models.Index(fields=['start_node'], name='flow_connec_start_n_1f9c5e_idx'),
        ),
        migrations.AddIndex(
            model_name='flowconnection',
            index=models.Index(fields=['end_node'], name='flow_connec_end_nod_85f733_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='flowconnection',
            unique_together={('flow', 'connection_id')},
        ),
        migrations.AlterUniqueTogether(
            name='flowconditiongroup',
            unique_together={('node', 'group_id')},
        ),
        migrations.AlterUniqueTogether(
            name='flowcondition',
            unique_together={('node', 'condition_id')},
        ),
    ]
